//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Resources/Characters/CharactersHandler/Player/PlayerManager/InputSystem/UIInputSystem.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @UIInputSystem : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @UIInputSystem()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""UIInputSystem"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""edbc20e3-a076-4b23-ac75-7b0e4a74372f"",
            ""actions"": [
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""6d05c624-695b-452b-9d45-34333ec906d6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Review Cursor"",
                    ""type"": ""Button"",
                    ""id"": ""d94c0389-9f77-4bd6-93c3-bc2f0cb15694"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Map"",
                    ""type"": ""Button"",
                    ""id"": ""c8ffc893-4aca-458f-b220-6585cfe92c97"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""efeb918a-b9c4-4176-8708-bf6841f0fd40"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7780ea10-c535-4895-844f-c6758538ccbd"",
                    ""path"": ""<Keyboard>/alt"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Review Cursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cc7d44a-40ed-4490-a4a1-685d4c55bdad"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Map"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Map"",
            ""id"": ""8b3d0d8f-fe64-48d0-aa81-b60701400d9b"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""a18a8119-dfd0-4d67-b3f8-8ccb273eee76"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""02d15c96-47cd-40ae-9f7c-982bbd071fb7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": ""NormalizeVector2"",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CharacterDisplay"",
            ""id"": ""f9772619-4d80-4604-b0e6-c4ef2cf49f70"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""4b837886-219b-4bb5-b5c6-39d451094cff"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""979cf691-78e9-42a1-8ee9-28d9b0ef0afd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ArtifactSpin"",
                    ""type"": ""Value"",
                    ""id"": ""a463fe62-f92d-4d9f-bb3d-5c1ab07ec294"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""387b1930-7ba1-4423-9385-758ec85f8d4a"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""7a4d12f1-25a9-4559-be07-57ca4f5174bc"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""80f3f58e-c9a3-433f-9bc3-753994868c80"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""8accfe4f-8772-42ac-9712-b63e586ac495"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""86cea019-271b-4e58-9dfd-39b607886540"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArtifactSpin"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""1b57aa3e-44f7-4e4a-8d31-8c7d24a9247c"",
                    ""path"": ""<Pointer>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArtifactSpin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""ea44a676-9bf9-493f-8272-3a9d0bafa4e5"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArtifactSpin"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""World"",
            ""id"": ""78f4eed7-af11-483c-a933-4925e674ef30"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a9624586-5600-4a0a-9fdb-f74e4de22bfb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3f71ee09-a87b-48e3-9c73-dbae55d27a38"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Inventory = m_UI.FindAction("Inventory", throwIfNotFound: true);
        m_UI_ReviewCursor = m_UI.FindAction("Review Cursor", throwIfNotFound: true);
        m_UI_Map = m_UI.FindAction("Map", throwIfNotFound: true);
        // Map
        m_Map = asset.FindActionMap("Map", throwIfNotFound: true);
        m_Map_Zoom = m_Map.FindAction("Zoom", throwIfNotFound: true);
        // CharacterDisplay
        m_CharacterDisplay = asset.FindActionMap("CharacterDisplay", throwIfNotFound: true);
        m_CharacterDisplay_Zoom = m_CharacterDisplay.FindAction("Zoom", throwIfNotFound: true);
        m_CharacterDisplay_Look = m_CharacterDisplay.FindAction("Look", throwIfNotFound: true);
        m_CharacterDisplay_ArtifactSpin = m_CharacterDisplay.FindAction("ArtifactSpin", throwIfNotFound: true);
        // World
        m_World = asset.FindActionMap("World", throwIfNotFound: true);
        m_World_Interact = m_World.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Inventory;
    private readonly InputAction m_UI_ReviewCursor;
    private readonly InputAction m_UI_Map;
    public struct UIActions
    {
        private @UIInputSystem m_Wrapper;
        public UIActions(@UIInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Inventory => m_Wrapper.m_UI_Inventory;
        public InputAction @ReviewCursor => m_Wrapper.m_UI_ReviewCursor;
        public InputAction @Map => m_Wrapper.m_UI_Map;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Inventory.started -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @Inventory.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @Inventory.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnInventory;
                @ReviewCursor.started -= m_Wrapper.m_UIActionsCallbackInterface.OnReviewCursor;
                @ReviewCursor.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnReviewCursor;
                @ReviewCursor.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnReviewCursor;
                @Map.started -= m_Wrapper.m_UIActionsCallbackInterface.OnMap;
                @Map.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnMap;
                @Map.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnMap;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Inventory.started += instance.OnInventory;
                @Inventory.performed += instance.OnInventory;
                @Inventory.canceled += instance.OnInventory;
                @ReviewCursor.started += instance.OnReviewCursor;
                @ReviewCursor.performed += instance.OnReviewCursor;
                @ReviewCursor.canceled += instance.OnReviewCursor;
                @Map.started += instance.OnMap;
                @Map.performed += instance.OnMap;
                @Map.canceled += instance.OnMap;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Map
    private readonly InputActionMap m_Map;
    private IMapActions m_MapActionsCallbackInterface;
    private readonly InputAction m_Map_Zoom;
    public struct MapActions
    {
        private @UIInputSystem m_Wrapper;
        public MapActions(@UIInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_Map_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MapActions set) { return set.Get(); }
        public void SetCallbacks(IMapActions instance)
        {
            if (m_Wrapper.m_MapActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_MapActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_MapActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_MapActionsCallbackInterface.OnZoom;
            }
            m_Wrapper.m_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
            }
        }
    }
    public MapActions @Map => new MapActions(this);

    // CharacterDisplay
    private readonly InputActionMap m_CharacterDisplay;
    private ICharacterDisplayActions m_CharacterDisplayActionsCallbackInterface;
    private readonly InputAction m_CharacterDisplay_Zoom;
    private readonly InputAction m_CharacterDisplay_Look;
    private readonly InputAction m_CharacterDisplay_ArtifactSpin;
    public struct CharacterDisplayActions
    {
        private @UIInputSystem m_Wrapper;
        public CharacterDisplayActions(@UIInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_CharacterDisplay_Zoom;
        public InputAction @Look => m_Wrapper.m_CharacterDisplay_Look;
        public InputAction @ArtifactSpin => m_Wrapper.m_CharacterDisplay_ArtifactSpin;
        public InputActionMap Get() { return m_Wrapper.m_CharacterDisplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterDisplayActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterDisplayActions instance)
        {
            if (m_Wrapper.m_CharacterDisplayActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnZoom;
                @Look.started -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnLook;
                @ArtifactSpin.started -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnArtifactSpin;
                @ArtifactSpin.performed -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnArtifactSpin;
                @ArtifactSpin.canceled -= m_Wrapper.m_CharacterDisplayActionsCallbackInterface.OnArtifactSpin;
            }
            m_Wrapper.m_CharacterDisplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @ArtifactSpin.started += instance.OnArtifactSpin;
                @ArtifactSpin.performed += instance.OnArtifactSpin;
                @ArtifactSpin.canceled += instance.OnArtifactSpin;
            }
        }
    }
    public CharacterDisplayActions @CharacterDisplay => new CharacterDisplayActions(this);

    // World
    private readonly InputActionMap m_World;
    private IWorldActions m_WorldActionsCallbackInterface;
    private readonly InputAction m_World_Interact;
    public struct WorldActions
    {
        private @UIInputSystem m_Wrapper;
        public WorldActions(@UIInputSystem wrapper) { m_Wrapper = wrapper; }
        public InputAction @Interact => m_Wrapper.m_World_Interact;
        public InputActionMap Get() { return m_Wrapper.m_World; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(WorldActions set) { return set.Get(); }
        public void SetCallbacks(IWorldActions instance)
        {
            if (m_Wrapper.m_WorldActionsCallbackInterface != null)
            {
                @Interact.started -= m_Wrapper.m_WorldActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_WorldActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_WorldActionsCallbackInterface.OnInteract;
            }
            m_Wrapper.m_WorldActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
            }
        }
    }
    public WorldActions @World => new WorldActions(this);
    public interface IUIActions
    {
        void OnInventory(InputAction.CallbackContext context);
        void OnReviewCursor(InputAction.CallbackContext context);
        void OnMap(InputAction.CallbackContext context);
    }
    public interface IMapActions
    {
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface ICharacterDisplayActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnArtifactSpin(InputAction.CallbackContext context);
    }
    public interface IWorldActions
    {
        void OnInteract(InputAction.CallbackContext context);
    }
}
